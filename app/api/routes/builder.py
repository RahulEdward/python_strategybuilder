"""
Builder Router with Correct Template Paths
Replace your builder.py with this code
"""
from fastapi import APIRouter, Request, Form, Depends, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from typing import Annotated, Optional
import logging
from datetime import datetime

from app.db.session import get_db
from app.models.user import User
from app.services.auth_service import get_current_user

# Configure logging
logger = logging.getLogger(__name__)

# Create router
router = APIRouter()

# Templates
templates = Jinja2Templates(directory="app/templates")

# Redirect route for /api/builder (without trailing slash) to /api/builder/
@router.get("")
async def redirect_to_builder():
    """Redirect /api/builder to /api/builder/"""
    return RedirectResponse(url="/api/builder/", status_code=301)

def generate_python_strategy(data: dict) -> str:
    """Generate Python strategy code based on form data"""
    indicator_code = get_indicator_code(data.get("indicator", "RSI"))
    
    return f'''# Trading Strategy: {data.get("indicator", "Custom")} Strategy
# Generated by Strategy Builder on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

import pandas as pd
import numpy as np
import talib
from datetime import datetime
from typing import Dict, List, Optional

class TradingStrategy:
    def __init__(self, capital={data.get("capital", 100000)}, stop_loss={data.get("stop_loss", 2.5)}, target={data.get("target", 5.0)}):
        self.capital = capital
        self.stop_loss = stop_loss / 100  # Convert to decimal
        self.target = target / 100  # Convert to decimal
        self.position = 0
        self.entry_price = 0
        self.trades = []
        self.strategy_name = "{data.get("indicator", "Custom")}_Strategy"
        
    def calculate_{data.get("indicator", "rsi").lower().replace(" ", "_")}(self, data):
        """Calculate {data.get("indicator", "RSI")} indicator"""
        {indicator_code}
        
    def check_entry_condition(self, data):
        """Check if entry condition is met"""
        indicator_value = self.calculate_{data.get("indicator", "rsi").lower().replace(" ", "_")}(data)
        condition = "{data.get("operator", ">")}"
        threshold = {data.get("value", 70)}
        
        if condition == ">":
            return indicator_value > threshold
        elif condition == "<":
            return indicator_value < threshold
        elif condition == ">=":
            return indicator_value >= threshold
        elif condition == "<=":
            return indicator_value <= threshold
        elif condition == "==":
            return abs(indicator_value - threshold) < 0.01
        elif condition == "crosses_above":
            return indicator_value > threshold
        elif condition == "crosses_below":
            return indicator_value < threshold
        else:
            return False
        
    def execute_trade(self, current_price, timestamp=None):
        """Execute trade based on strategy"""
        if timestamp is None:
            timestamp = datetime.now()
            
        if self.position == 0:  # No position
            if self.check_entry_condition(data):
                self.position = self.capital / current_price
                self.entry_price = current_price
                trade_info = {{
                    "type": "BUY",
                    "shares": self.position,
                    "price": current_price,
                    "timestamp": timestamp,
                    "capital_used": self.capital
                }}
                self.trades.append(trade_info)
                print(f"BUY: {{self.position:.4f}} shares at ₹{{current_price:.2f}}")
                return trade_info
                
        elif self.position > 0:  # Long position
            # Check stop loss
            if current_price <= self.entry_price * (1 - self.stop_loss):
                profit_loss = (current_price - self.entry_price) * self.position
                trade_info = {{
                    "type": "SELL_STOP_LOSS",
                    "shares": self.position,
                    "price": current_price,
                    "timestamp": timestamp,
                    "pnl": profit_loss
                }}
                self.trades.append(trade_info)
                print(f"STOP LOSS: Sold at ₹{{current_price:.2f}}, P&L: ₹{{profit_loss:.2f}}")
                self.position = 0
                return trade_info
                
            # Check target
            elif current_price >= self.entry_price * (1 + self.target):
                profit_loss = (current_price - self.entry_price) * self.position
                trade_info = {{
                    "type": "SELL_TARGET",
                    "shares": self.position,
                    "price": current_price,
                    "timestamp": timestamp,
                    "pnl": profit_loss
                }}
                self.trades.append(trade_info)
                print(f"TARGET: Sold at ₹{{current_price:.2f}}, P&L: ₹{{profit_loss:.2f}}")
                self.position = 0
                return trade_info
        
        return None
    
    def get_performance_summary(self):
        """Get strategy performance summary"""
        if not self.trades:
            return {{"total_trades": 0, "total_pnl": 0, "win_rate": 0}}
        
        buy_trades = [t for t in self.trades if t["type"] == "BUY"]
        sell_trades = [t for t in self.trades if "SELL" in t["type"]]
        
        total_pnl = sum(t.get("pnl", 0) for t in sell_trades)
        winning_trades = len([t for t in sell_trades if t.get("pnl", 0) > 0])
        
        return {{
            "total_trades": len(sell_trades),
            "total_pnl": total_pnl,
            "win_rate": (winning_trades / len(sell_trades) * 100) if sell_trades else 0,
            "current_position": self.position,
            "entry_price": self.entry_price
        }}

# Strategy Parameters:
# Entry: {data.get("indicator", "RSI")} {data.get("operator", ">")} {data.get("value", 70)}
# Stop Loss: {data.get("stop_loss", 2.5)}%
# Target: {data.get("target", 5.0)}%
# Capital: ₹{data.get("capital", 100000):,}

# Usage Example:
# strategy = TradingStrategy()
# result = strategy.execute_trade(current_market_price, market_data)
# performance = strategy.get_performance_summary()
'''

def get_indicator_code(indicator: str) -> str:
    """Get the appropriate indicator calculation code"""
    indicators = {
        'RSI': 'return talib.RSI(data["close"], timeperiod=14)',
        'EMA': 'return talib.EMA(data["close"], timeperiod=20)',
        'SMA': 'return talib.SMA(data["close"], timeperiod=20)',
        'MACD': '''macd, signal, hist = talib.MACD(data["close"])
        return macd''',
        'Bollinger_Bands': '''upper, middle, lower = talib.BBANDS(data["close"])
        return middle''',
        'Stochastic': '''slowk, slowd = talib.STOCH(data["high"], data["low"], data["close"])
        return slowk''',
        'Williams_R': 'return talib.WILLR(data["high"], data["low"], data["close"])',
        'CCI': 'return talib.CCI(data["high"], data["low"], data["close"])'
    }
    return indicators.get(indicator, 'return 0  # Indicator not implemented')

@router.get("/", response_class=HTMLResponse)
async def get_builder_page(
    request: Request, 
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """GET /api/builder/ - Strategy builder form"""
    try:
        logger.info(f"Builder GET request from user: {current_user.username}")
        
        return templates.TemplateResponse(
            "builder/builder.html",  # CORRECT PATH: templates/builder/builder.html
            {
                "request": request,
                "user": current_user,
                "username": current_user.username,
                "email": current_user.email,
                "app_name": "Strategy Builder SaaS"
            }
        )
        
    except Exception as e:
        logger.error(f"Error in builder GET: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Builder page error: {str(e)}")

@router.post("/", response_class=HTMLResponse)
async def process_strategy_builder(
    request: Request,
    indicator: Annotated[str, Form()],
    operator: Annotated[str, Form()],
    value: Annotated[float, Form()],
    stop_loss: Annotated[float, Form()],
    target: Annotated[float, Form()],
    capital: Annotated[float, Form()],
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """POST /api/builder/ - Process form submission"""
    try:
        logger.info(f"Strategy submission from {current_user.username}: {indicator} {operator} {value}")
        
        # Basic validation
        if not all([indicator, operator, value is not None, stop_loss is not None, target is not None, capital is not None]):
            return templates.TemplateResponse(
                "builder/builder.html",  # CORRECT PATH
                {
                    "request": request,
                    "user": current_user,
                    "error": "Please fill out all required fields.",
                    "app_name": "Strategy Builder SaaS"
                },
                status_code=400
            )
        
        # Prepare strategy data
        strategy_data = {
            "indicator": indicator,
            "operator": operator,
            "value": value,
            "stop_loss": stop_loss,
            "target": target,
            "capital": capital
        }
        
        # Generate strategy code
        generated_code = generate_python_strategy(strategy_data)
        
        return templates.TemplateResponse(
            "builder/strategy_result.html",  # CORRECT PATH
            {
                "request": request,
                "user": current_user,
                "strategy": strategy_data,
                "generated_code": generated_code,
                "app_name": "Strategy Builder SaaS"
            }
        )
        
    except Exception as e:
        logger.error(f"Error in strategy builder POST: {str(e)}")
        return templates.TemplateResponse(
            "builder/builder.html",  # CORRECT PATH
            {
                "request": request,
                "user": current_user,
                "error": f"Error processing strategy: {str(e)}",
                "app_name": "Strategy Builder SaaS"
            },
            status_code=500
        )

@router.get("/test")
async def test_builder():
    """Test endpoint"""
    return {
        "status": "success",
        "message": "Builder router working with correct paths!",
        "template_path": "builder/builder.html",
        "timestamp": datetime.now().isoformat()
    }