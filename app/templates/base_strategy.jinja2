"""
{{ strategy_name | sanitize_name }}
Generated Strategy for Backtesting
Created by Windsurf Strategy Builder
"""

import pandas as pd
import numpy as np
import talib
from typing import Optional, Tuple, Dict, Any
import warnings
warnings.filterwarnings('ignore')

class {{ strategy_name | sanitize_name | title }}Strategy:
    """
    {{ strategy_name }} - Automated Trading Strategy
    
    Timeframe: {{ timeframe }}
    Buy Conditions: {{ buy_conditions | length }}
    Sell Conditions: {{ sell_conditions | length }}
    Indicators Used: {{ indicators_used | join(', ') }}
    """
    
    def __init__(self, initial_capital: float = 100000):
        self.initial_capital = initial_capital
        self.current_capital = initial_capital
        self.position = 0  # 0: No position, 1: Long, -1: Short
        self.entry_price = 0
        self.trades = []
        self.equity_curve = []
        
        # Money Management Settings
        {% if money_management %}
        self.position_size = {{ money_management.get('position_size', 10) }} / 100  # {{ money_management.get('position_size', 10) }}%
        self.max_risk = {{ money_management.get('max_risk', 2) }} / 100  # {{ money_management.get('max_risk', 2) }}%
        self.max_positions = {{ money_management.get('max_positions', 1) }}
        {% else %}
        self.position_size = 0.1  # 10%
        self.max_risk = 0.02  # 2%
        self.max_positions = 1
        {% endif %}
    
    def calculate_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """Calculate all required technical indicators"""
        data = df.copy()
        
        {% for indicator_name, indicator_code in indicators.items() %}
        # {{ indicator_name }} Indicator
        {{ indicator_code }}
        
        {% endfor %}
        
        return data
    
    def generate_signals(self, df: pd.DataFrame) -> pd.DataFrame:
        """Generate buy/sell signals based on conditions"""
        data = df.copy()
        
        # Initialize signal columns
        data['buy_signal'] = False
        data['sell_signal'] = False
        
        {% if buy_conditions %}
        # Buy Conditions
        {% for condition in buy_conditions %}
        {{ condition }}
        {% endfor %}
        
        # Combined Buy Signal
        data['buy_signal'] = (
            {% for i in range(buy_conditions | length) %}
            buy_{{ loop.index }}{% if not loop.last %} & {% endif %}
            {% endfor %}
        )
        {% endif %}
        
        {% if sell_conditions %}
        # Sell Conditions  
        {% for condition in sell_conditions %}
        {{ condition }}
        {% endfor %}
        
        # Combined Sell Signal
        data['sell_signal'] = (
            {% for i in range(sell_conditions | length) %}
            sell_{{ loop.index }}{% if not loop.last %} & {% endif %}
            {% endfor %}
        )
        {% endif %}
        
        return data
    
    def backtest(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Execute backtest strategy"""
        # Calculate indicators
        data = self.calculate_indicators(df)
        
        # Generate signals
        data = self.generate_signals(data)
        
        # Execute trades
        for i in range(1, len(data)):
            current_price = data['close'].iloc[i]
            
            # Check for buy signals
            if data['buy_signal'].iloc[i] and self.position == 0:
                self._execute_buy(current_price, data.index[i])
            
            # Check for sell signals
            elif data['sell_signal'].iloc[i] and self.position == 1:
                self._execute_sell(current_price, data.index[i])
            
            # Update equity curve
            self._update_equity(current_price)
        
        # Calculate performance metrics
        return self._calculate_performance()
    
    def _execute_buy(self, price: float, timestamp):
        """Execute buy order"""
        position_value = self.current_capital * self.position_size
        shares = position_value / price
        
        self.position = 1
        self.entry_price = price
        
        trade = {
            'type': 'BUY',
            'timestamp': timestamp,
            'price': price,
            'shares': shares,
            'value': position_value
        }
        self.trades.append(trade)
        print(f"BUY: {shares:.2f} shares at ${price:.2f} on {timestamp}")
    
    def _execute_sell(self, price: float, timestamp):
        """Execute sell order"""
        if self.position == 1:
            # Calculate P&L
            last_buy = next((t for t in reversed(self.trades) if t['type'] == 'BUY'), None)
            if last_buy:
                pnl = (price - last_buy['price']) * last_buy['shares']
                self.current_capital += pnl
                
                trade = {
                    'type': 'SELL',
                    'timestamp': timestamp,
                    'price': price,
                    'shares': last_buy['shares'],
                    'pnl': pnl
                }
                self.trades.append(trade)
                print(f"SELL: {last_buy['shares']:.2f} shares at ${price:.2f} on {timestamp}, P&L: ${pnl:.2f}")
        
        self.position = 0
        self.entry_price = 0
    
    def _update_equity(self, current_price: float):
        """Update equity curve"""
        equity = self.current_capital
        
        # Add unrealized P&L if in position
        if self.position == 1:
            last_buy = next((t for t in reversed(self.trades) if t['type'] == 'BUY'), None)
            if last_buy:
                unrealized_pnl = (current_price - last_buy['price']) * last_buy['shares']
                equity += unrealized_pnl
        
        self.equity_curve.append(equity)
    
    def _calculate_performance(self) -> Dict[str, Any]:
        """Calculate strategy performance metrics"""
        if not self.equity_curve:
            return {
                'total_return': 0,
                'total_trades': 0,
                'winning_trades': 0,
                'win_rate': 0,
                'sharpe_ratio': 0,
                'max_drawdown': 0,
                'final_capital': self.initial_capital,
                'trades': [],
                'equity_curve': []
            }
        
        equity_series = pd.Series(self.equity_curve)
        returns = equity_series.pct_change().dropna()
        
        # Calculate metrics
        total_return = (self.current_capital - self.initial_capital) / self.initial_capital
        total_trades = len([t for t in self.trades if t['type'] == 'SELL'])
        winning_trades = len([t for t in self.trades if t['type'] == 'SELL' and t.get('pnl', 0) > 0])
        
        win_rate = winning_trades / total_trades if total_trades > 0 else 0
        
        # Risk metrics
        sharpe_ratio = returns.mean() / returns.std() * np.sqrt(252) if len(returns) > 1 and returns.std() > 0 else 0
        max_drawdown = self._calculate_max_drawdown(equity_series)
        
        return {
            'total_return': total_return,
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'win_rate': win_rate,
            'sharpe_ratio': sharpe_ratio,
            'max_drawdown': max_drawdown,
            'final_capital': self.current_capital,
            'trades': self.trades,
            'equity_curve': self.equity_curve
        }
    
    def _calculate_max_drawdown(self, equity_series: pd.Series) -> float:
        """Calculate maximum drawdown"""
        peak = equity_series.expanding(min_periods=1).max()
        drawdown = (equity_series - peak) / peak
        return drawdown.min()

# Example usage and testing
if __name__ == "__main__":
    import yfinance as yf
    import matplotlib.pyplot as plt
    
    def load_market_data(symbol: str = "SPY", period: str = "2y") -> pd.DataFrame:
        """Load real market data using yfinance"""
        try:
            ticker = yf.Ticker(symbol)
            data = ticker.history(period=period)
            data.columns = data.columns.str.lower()
            return data
        except Exception as e:
            print(f"Error loading data: {e}")
            return load_sample_data()
    
    def load_sample_data() -> pd.DataFrame:
        """Load sample OHLCV data for testing"""
        dates = pd.date_range('2020-01-01', '2023-12-31', freq='D')
        np.random.seed(42)
        
        # Generate sample price data
        price = 100
        prices = [price]
        
        for _ in range(len(dates) - 1):
            change = np.random.normal(0, 0.02)
            price *= (1 + change)
            prices.append(price)
        
        df = pd.DataFrame({
            'open': prices,
            'high': [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices],
            'low': [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices],
            'close': prices,
            'volume': np.random.randint(1000, 10000, len(dates))
        }, index=dates)
        
        return df
    
    # Run backtest
    print("="*60)
    print(f"🚀 WINDSURF STRATEGY BUILDER - BACKTEST RESULTS")
    print("="*60)
    print(f"Strategy: {{ strategy_name }}")
    print(f"Generated: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    strategy = {{ strategy_name | sanitize_name | title }}Strategy(initial_capital=100000)
    
    # Try to load real market data, fallback to sample data
    try:
        market_data = load_market_data("SPY", "2y")
        print(f"📊 Data Source: Real market data (SPY)")
    except:
        market_data = load_sample_data()
        print(f"📊 Data Source: Sample data")
    
    print(f"📅 Data Period: {market_data.index[0].date()} to {market_data.index[-1].date()}")
    print(f"📈 Total Bars: {len(market_data)}")
    
    results = strategy.backtest(market_data)
    
    print("\n" + "="*60)
    print("📈 PERFORMANCE METRICS")
    print("="*60)
    print(f"💰 Total Return: {results['total_return']:.2%}")
    print(f"🔄 Total Trades: {results['total_trades']}")
    print(f"✅ Winning Trades: {results['winning_trades']}")
    print(f"🎯 Win Rate: {results['win_rate']:.2%}")
    print(f"📊 Sharpe Ratio: {results['sharpe_ratio']:.2f}")
    print(f"📉 Max Drawdown: {results['max_drawdown']:.2%}")
    print(f"💵 Final Capital: ${results['final_capital']:,.2f}")
    
    # Plot results if matplotlib is available
    try:
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
        
        # Plot equity curve
        ax1.plot(results['equity_curve'])
        ax1.set_title(f"{{ strategy_name }} - Equity Curve")
        ax1.set_ylabel("Portfolio Value ($)")
        ax1.grid(True, alpha=0.3)
        
        # Plot price with buy/sell signals
        data_with_signals = strategy.calculate_indicators(market_data)
        data_with_signals = strategy.generate_signals(data_with_signals)
        
        ax2.plot(data_with_signals.index, data_with_signals['close'], label='Price', alpha=0.7)
        
        # Mark buy/sell points
        buy_signals = data_with_signals[data_with_signals['buy_signal']]
        sell_signals = data_with_signals[data_with_signals['sell_signal']]
        
        ax2.scatter(buy_signals.index, buy_signals['close'], color='green', marker='^', s=50, label='Buy Signal')
        ax2.scatter(sell_signals.index, sell_signals['close'], color='red', marker='v', s=50, label='Sell Signal')
        
        ax2.set_title("Price Chart with Signals")
        ax2.set_ylabel("Price ($)")
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(f"{{ strategy_name | sanitize_name }}_backtest_results.png", dpi=150, bbox_inches='tight')
        print(f"\n📊 Chart saved as: {{ strategy_name | sanitize_name }}_backtest_results.png")
        
    except ImportError:
        print("\n📊 Install matplotlib to see charts: pip install matplotlib")
    
    print("\n" + "="*60)
    print("✅ Backtest completed successfully!")
    print("⚠️  Remember: Past performance does not guarantee future results.")
    print("🔍 Review the strategy logic before live trading.")
    print("="*60)